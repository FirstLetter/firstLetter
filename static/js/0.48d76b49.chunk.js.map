{"version":3,"sources":["components/withAuthLoad.js","components/Dummy.js","components/MyPulls/MyPulls.js"],"names":["AuthComponent","Dummy","DataTile","text","author","onClick","className","CreateFork","user","useLoginContext","useState","show","setShow","useGitFetchAsync","GitConst","username","PRIME_USER","repo","PRIME_REPO","headers","Authorization","authtoken","loading","data","error","setLoading","useEffect","ToRender","href","MyFiles","component","fromFork","GetAllFiles","filename","userFork","GetUserFork","handleClick","index","map","item","key","name","split","props","loggedIn"],"mappings":"2HAI6BA,E,oDCFhBC,EAAQ,WACjB,OAAO,sC,OCKLC,EAAW,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC7B,OACI,yBAAKA,QAASA,EAASC,UAAU,wGAC7B,yBAAKA,UAAU,iDAAiDH,GAChE,yBAAKG,UAAU,oDAAoDF,KAKzEG,EAAa,WAAO,IAEfC,EAAQC,cAARD,KAFc,EAGGE,oBAAS,GAHZ,mBAGdC,EAHc,KAGRC,EAHQ,OAIsBC,YACvCC,IAASP,WACT,CACIQ,SAAUC,IACVC,KAAMC,KAEV,KACA,CACIC,QAAS,CACLC,cAAc,UAAD,OAAYZ,EAAKa,cAGtC,GAZGC,EAJc,EAIdA,QAASC,EAJK,EAILA,KAAMC,EAJD,EAICA,MAAOC,EAJR,EAIQA,WAe7BC,qBAAU,YACS,IAAZJ,GACa,OAATC,GAA2B,OAAVC,GAChBZ,GAAQ,KAGjB,CAACU,IAEJ,IAKIK,EAYJ,OAXe,IAAZL,EACCK,EAAW,yBAAKrB,UAAU,sDAAf,sBAAuF,kBAAC,IAAD,OAEpF,OAAVkB,EACJG,EAAW,yBAAKrB,UAAU,iDAAf,4BACI,OAATiB,IACNI,EAAW,yBAAKrB,UAAU,iDAAf,kCACwB,kBAAC,IAAD,CAAGA,UAAU,uEAAuEsB,KAAK,YAAzF,iCAKnC,oCACKD,GAEY,IAAThB,EACA,6BACI,yBAAKL,UAAU,4EAAf,oBAGA,4BACIA,UAAU,oIACVD,QAAS,kBA3BzBoB,GAAW,QACXb,GAAQ,KAwBI,WAMJ,OAOViB,GF/EuB7B,EE+EA,YAAkC,IA0BvD8B,EA1BuBzB,EAA+B,EAA/BA,QAA+B,IAAtB0B,gBAAsB,SAEnDvB,EAAQC,cAARD,KAFmD,EAI3BK,YAC3BC,IAASkB,YACT,CAAEjB,UAAuB,IAAZgB,EAAmBvB,EAAKO,SAAWC,IAAaC,KAAMC,IAAYe,SAAUzB,EAAKO,UAC9F,KACA,MAJGO,EAJmD,EAInDA,QAASE,EAJ0C,EAI1CA,MAAOD,EAJmC,EAInCA,KAOjBW,EAAWrB,YACbC,IAASqB,YACT,CACIpB,SAAUP,EAAKO,SACfE,KAAMC,KAEV,KACA,MACA,GAGEkB,EAAc,SAACC,GACjBhC,EAAQkB,EAAKc,KAoBjB,OAhBe,IAAZf,IAAyC,IAArBY,EAASZ,QAC5BQ,EAAY,kBAAC,IAAD,MACI,OAAVN,GACU,IAAbO,EACuB,OAAnBG,EAASV,MACRM,EAAY,kBAAC,EAAD,MACY,OAAlBI,EAASX,OACfO,EAAY,yBAAKxB,UAAU,8CAAf,oCAGhBwB,EAAY,kBAAC,EAAD,CAAU3B,KAAK,iBAAiBC,OAAO,KAExC,OAATmB,IACNO,EAAY,6BAAMP,EAAKe,KAAI,SAACC,EAAMF,GAAP,OAAiB,kBAAC,EAAD,CAAUG,IAAKH,EAAOlC,KAAMoC,EAAKE,KAAKC,MAAM,KAAK,GAAItC,OAAQI,EAAKO,SAAUV,QAAS,kBAAM+B,EAAYC,WAGhJ,yBAAK/B,UAAU,OAClB,yBAAKA,UAAU,sFAAkG,IAAbyB,EAAoB,UAAY,YACpI,yBAAKzB,UAAU,eACVwB,KF3HF,SAACa,GAGJ,OAAgB,IAFGlC,cAAZmC,SAGI,kBAAC5C,EAAkB2C,GAEnB,kBAAC,EAAD,QE0HJd","file":"static/js/0.48d76b49.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useLoginContext } from 'context'\r\nimport { Dummy } from './Dummy'\r\n\r\nexport const withAuthLoad = (AuthComponent) => {\r\n\r\n    return (props) => {\r\n        const {loggedIn} = useLoginContext()\r\n\r\n        if(loggedIn === true){\r\n            return <AuthComponent {...props} />\r\n        } else {\r\n            return <Dummy />\r\n        }\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const Dummy = () => {\r\n    return <></>\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useLoginContext } from 'context'\r\nimport { useGitFetchAsync } from 'components/useFetchAsync'\r\nimport { GitConst, PRIME_USER, PRIME_REPO } from 'apiroutes'\r\nimport { A } from 'hookrouter'\r\nimport { withAuthLoad } from 'components/withAuthLoad'\r\nimport { LoadingComponent } from 'components/utils/Loader'\r\n\r\nconst DataTile = ({text, author, onClick}) => {\r\n    return (\r\n        <div onClick={onClick} className=\"shadow-lg rounded col-12 col-md-3 col-lg-2 border-sm d-inline-block app-bg-indigo text-white p-2 m-2\">\r\n            <div className=\"data-tile-title font-size-24 font-roboto-mono\">{text}</div>\r\n            <div className=\"font-size-16 font-roboto-mono app-text-bg-accent\">{author}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CreateFork = () => {\r\n\r\n    const {user} = useLoginContext()\r\n    const [show, setShow] = useState(true) \r\n    const {loading, data, error, setLoading} = useGitFetchAsync(\r\n        GitConst.CreateFork,\r\n        {\r\n            username: PRIME_USER,\r\n            repo: PRIME_REPO\r\n        },\r\n        null,\r\n        {\r\n            headers: {\r\n                Authorization: `bearer ${user.authtoken}`\r\n            }\r\n        },\r\n        false\r\n    )\r\n\r\n    useEffect(() => {\r\n        if(loading === false){\r\n            if(data === null && error !== null) {\r\n                setShow(true)\r\n            }\r\n        } \r\n    }, [loading])\r\n\r\n    const handleClickFork = () => {\r\n        setLoading(true)\r\n        setShow(false)\r\n    }\r\n\r\n    let ToRender\r\n    if(loading === true){\r\n        ToRender = <div className=\"font-ibm-plex-mono font-size-20 app-text-bg-accent\">Creating your fork <LoadingComponent /></div>\r\n    } \r\n    else if(error !== null){\r\n        ToRender = <div className=\"font-ibm-plex-mono font-size-20 app-text-main\">Error Creating your Fork</div>\r\n    } else if(data !== null) {\r\n        ToRender = <div className=\"font-ibm-plex-mono font-size-20 app-text-main\">\r\n            Successfully Created Your Fork <A className=\"text-decoration-none font-ibm-plex-mono font-size-20 app-text-accent\" href=\"/content\">Start Making pull requests!</A>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {ToRender}\r\n            {\r\n                show === true ?\r\n                <div>\r\n                    <div className=\"pl-2 font-ibm-plex-mono font-size-18 font-weight-500 app-text-blue-light\">\r\n                    Create Your Fork\r\n                    </div>\r\n                    <button \r\n                        className=\"m-2 px-3 py-2 font-weight-500 font-ibm-plex-mono app-bg-blue-light border-0 app-text-bg-main-hover app-bg-indigo-hover rounded-sm\" \r\n                        onClick={() => handleClickFork()}>\r\n                            Create\r\n                    </button>\r\n                </div>:\r\n                null\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst MyFiles = withAuthLoad(({onClick, fromFork = false}) => {\r\n    \r\n    const {user} = useLoginContext()\r\n\r\n    const {loading, error, data} = useGitFetchAsync(\r\n        GitConst.GetAllFiles, \r\n        { username: (fromFork=== true ? user.username : PRIME_USER), repo: PRIME_REPO, filename: user.username },\r\n        null,\r\n        null\r\n    )\r\n\r\n    const userFork = useGitFetchAsync(\r\n        GitConst.GetUserFork,\r\n        {\r\n            username: user.username,\r\n            repo: PRIME_REPO\r\n        },\r\n        null,\r\n        null,\r\n        true\r\n    )\r\n\r\n    const handleClick = (index) => {\r\n        onClick(data[index])\r\n    }\r\n\r\n    let component\r\n    if(loading === true || userFork.loading === true) {\r\n        component = <LoadingComponent  />\r\n    } else if(error !== null) {\r\n        if(fromFork === true) {\r\n            if(userFork.error !== null) {\r\n                component = <CreateFork />\r\n            } else if(userFork.data !== null) {\r\n                component = <div className=\"app-text-main font-space-mono font-size-20\">You don't have any commits yet!</div>\r\n            }\r\n        } else {\r\n            component = <DataTile text=\"No Pulls Found\" author=\"\" />\r\n        }\r\n    } else if(data !== null) {\r\n        component = <div>{data.map((item, index) => <DataTile key={index} text={item.name.split(\".\")[0]} author={user.username} onClick={() => handleClick(index)}/>)}</div>\r\n    }\r\n\r\n    return <div className=\"row\">\r\n        <div className=\"col-12 px-3 font-size-20 app-text-indigo-light font-weight-500 font-ibm-plex-mono\">{fromFork === true ? \"My Fork\" : \"My Pulls\"}</div>\r\n        <div className=\"col-12 px-1\">\r\n            {component}\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default MyFiles"],"sourceRoot":""}